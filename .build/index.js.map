{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["\nfunction map<T, K>(\n  items: T[],\n  mappingFunction: (item: T) => K): K[] {\n    const results: K[] = []\n    for (let item of items) {\n      results.push(mappingFunction(item));\n    }\n    \n    return results\n}\n\ninterface Person { name: string; age: number;  }\nconst persons: Person[] = [{ name: 'John', age: 35 }]\nconst names = map<Person, string>(persons, person => person.name)\n\n// reduce example \nfunction reduce<T, K>(\n  arr: T[], \n  reducer: (result: K , elem: T) => K, \n  initialValue: K\n): K\n{\n  let result = initialValue\n  for(const el of arr){\n    result = reducer(result, el);\n  }\n  return result\n}\n\n// zip example \nfunction zip<T, K>(array1: T[], array2: K[]): [T, K][] {\n  const length = Math.min(array1.length, array2.length);\n  const result: [T, K][] = [];\n  for (let i = 0; i < length; i++) {\n    result.push([array1[i], array2[i]]);\n  }\n  return result;\n\n}\n\nconst people = [\n  {name : 'chloe', age: 5},\n  {name : 'mister', age: 100}, \n  {name : 'phillips', age: 7}\n]\n\nfunction pick<T, K extends keyof T>(arr: T[], key:K):T[K][]{\n  let result: T[K][] = [];\n  for(let item of arr){\n      result.push(item[key]);\n  }\n  return result;\n}\n\nconsole.log(pick(people, 'age'))"],
  "mappings": "AACA,aACE,OACA,iBAAsC;AACpC,QAAM,UAAe;AACrB,WAAS,QAAQ,OAAO;AACtB,YAAQ,KAAK,gBAAgB;AAAA;AAG/B,SAAO;AAAA;AAIX,MAAM,UAAoB,CAAC,EAAE,MAAM,QAAQ,KAAK;AAChD,MAAM,QAAQ,IAAoB,SAAS,YAAU,OAAO;AAG5D,gBACE,KACA,SACA,cAEF;AACE,MAAI,SAAS;AACb,aAAU,MAAM,KAAI;AAClB,aAAS,QAAQ,QAAQ;AAAA;AAE3B,SAAO;AAAA;AAIT,aAAmB,QAAa,QAAuB;AACrD,QAAM,SAAS,KAAK,IAAI,OAAO,QAAQ,OAAO;AAC9C,QAAM,SAAmB;AACzB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,WAAO,KAAK,CAAC,OAAO,IAAI,OAAO;AAAA;AAEjC,SAAO;AAAA;AAIT,MAAM,SAAS;AAAA,EACb,EAAC,MAAO,SAAS,KAAK;AAAA,EACtB,EAAC,MAAO,UAAU,KAAK;AAAA,EACvB,EAAC,MAAO,YAAY,KAAK;AAAA;AAG3B,cAAoC,KAAU,KAAa;AACzD,MAAI,SAAiB;AACrB,WAAQ,QAAQ,KAAI;AAChB,WAAO,KAAK,KAAK;AAAA;AAErB,SAAO;AAAA;AAGT,QAAQ,IAAI,KAAK,QAAQ;",
  "names": []
}
